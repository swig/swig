cmake_minimum_required ( VERSION 2.8 )

if ( NOT DEFINED CMAKE_BUILD_TYPE )
  set( CMAKE_BUILD_TYPE RelWithDebInfo CACHE STRING "Build type" )
endif ()

project ( SWIG C CXX )

set ( SWIG_MAJOR_VERSION 3 )
set ( SWIG_MINOR_VERSION 0 )
set ( SWIG_PATCH_VERSION 0 )
set ( SWIG_VERSION_STRING ${SWIG_MAJOR_VERSION}.${SWIG_MINOR_VERSION}.${SWIG_PATCH_VERSION} )

set ( PACKAGE_NAME swig )
set ( PACKAGE_VERSION ${SWIG_VERSION_STRING} )

list ( APPEND CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/cmake )
find_package ( BISON REQUIRED )

# Find system prerequisites
include ( CheckIncludeFile )
check_include_file ( ctype.h       HAVE_CTYPE_H       )
check_include_file ( dirent.h      HAVE_DIRENT_H      )
check_include_file ( inttypes.h    HAVE_INTTYPES_H    )
check_include_file ( malloc.h      HAVE_MALLOC_H      )
check_include_file ( memory.h      HAVE_MEMORY_H      )
check_include_file ( ndir.h        HAVE_NDIR_H        )
check_include_file ( pwd.h         HAVE_PWD_H         )
check_include_file ( regex.h       HAVE_REGEX_H       )
check_include_file ( stdbool.h     HAVE_STDBOOL_H     )
check_include_file ( stdint.h      HAVE_STDINT_H      )
check_include_file ( stdlib.h      HAVE_STDLIB_H      )
check_include_file ( string.h      HAVE_STRING_H      )
check_include_file ( strings.h     HAVE_STRINGS_H     )
check_include_file ( sys/dir.h     HAVE_SYS_DIR_H     )
check_include_file ( sys/ndir.h    HAVE_SYS_NDIR_H    )
check_include_file ( sys/stat.h    HAVE_SYS_STAT_H    )
check_include_file ( sys/time.h    HAVE_SYS_TIME_H    )
check_include_file ( sys/types.h   HAVE_SYS_TYPES_H   )
check_include_file ( sys/wait.h    HAVE_SYS_WAIT_H    )
check_include_file ( sys/un.h      HAVE_SYS_UN_H      )
check_include_file ( unistd.h      HAVE_UNISTD_H      )

include(CheckFunctionExists)
check_function_exists ( asprintf HAVE_ASPRINTF )
check_function_exists ( vsnprintf HAVE_C99_VSNPRINTF )
check_function_exists ( gethostname HAVE_GETHOSTNAME )
if(DEFINED HAVE_GETHOSTNAME)
  set(HAVE_GETHOSTNAME 1)
endif ()
check_function_exists ( getpwuid HAVE_GETPWUID )
check_function_exists ( popen HAVE_POPEN )
check_function_exists ( mkstemp HAVE_MKSTEMP )
check_function_exists ( realpath HAVE_REALPATH )
check_function_exists ( snprintf HAVE_SNPRINTF )
check_function_exists ( utimes HAVE_UTIMES )
check_function_exists ( vasprintf HAVE_VASPRINTF )
check_function_exists ( vsnprintf HAVE_VSNPRINTF )


option ( USE_PCRE "pcre" ON )

if ( USE_PCRE )
  find_package ( PCRE )
endif ()
if ( PCRE_FOUND )
  set ( HAVE_PCRE ${PCRE_FOUND} )
  include_directories ( ${PCRE_INCLUDE_DIRS} )
endif ()
set ( HAVE_BOOL TRUE )
set( SWIG_LIB share/swig/${SWIG_VERSION_STRING} )

option(USE_ZLIB "enable ccache compression" ON)
if ( USE_ZLIB )
  find_package ( ZLIB )
endif ()
if ( ZLIB_FOUND )
  set ( ENABLE_ZLIB 1 )
  include_directories ( ${ZLIB_INCLUDE_DIRS} )
else ()
  set ( ENABLE_ZLIB 0 )
endif ()

# for ccache man
find_program ( YODL2MAN_EXECUTABLE NAMES yodl2man )

option ( USE_PYTHON "use python for tests" ON )
if ( USE_PYTHON )
  find_package ( PythonInterp )
  find_package ( PythonLibs )
endif ()

enable_testing()

add_subdirectory ( Lib )
add_subdirectory ( Source )
add_subdirectory ( CCache )
add_subdirectory ( Examples )

# 'make package-source' creates rel-x.y.z.(tar.gz|zip)
set ( CPACK_PACKAGE_NAME          swig      )
set ( CPACK_SOURCE_GENERATOR      "TGZ;ZIP"     )
set ( CPACK_SOURCE_IGNORE_FILES "/.git;/build;.*~;${CPACK_SOURCE_IGNORE_FILES}" )
set ( CPACK_SOURCE_PACKAGE_FILE_NAME rel-${PACKAGE_VERSION} )
include ( CPack )
