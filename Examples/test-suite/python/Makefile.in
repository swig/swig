#######################################################################
# Makefile for python test-suite
#######################################################################

ifeq (,$(PY3))
  PYBIN = @PYTHON@
else
  PYBIN = @PYTHON3@
endif

LANGUAGE     = python
PYTHON       = $(PYBIN)

#*_runme.py for Python 2.x, *_runme3.py for Python 3.x
PY2SCRIPTSUFFIX = _runme.py
PY3SCRIPTSUFFIX = _runme3.py

ifeq (,$(PY3))
  SCRIPTSUFFIX = $(PY2SCRIPTSUFFIX)
else
  SCRIPTSUFFIX = $(PY3SCRIPTSUFFIX)
endif

srcdir       = @srcdir@
top_srcdir   = @top_srcdir@
top_builddir = @top_builddir@


PY2TO3 = 2to3 -x import 


CPP_TEST_CASES += \
	argcargvtest \
	callback \
	complextest \
	director_stl \
	director_wstring \
	file_test \
	iadd \
	implicittest \
	inout \
	inplaceadd \
	input \
	kwargs_feature \
	li_cstring \
	li_cwstring \
	li_factory \
	li_implicit \
	li_std_containers_int \
	li_std_map_member \
	li_std_multimap \
	li_std_pair_extra \
	li_std_set \
	li_std_stream \
	li_std_string_extra \
	li_std_vectora \
	li_std_vector_extra \
	li_std_wstream \
	li_std_wstring \
	primitive_types \
	python_abstractbase \
	python_append \
	python_director \
	python_nondynamic \
	python_overload_simple_cast \
	python_richcompare \
	simutry \
	std_containers \
	swigobject \
	template_matrix

#	li_std_carray
#	director_profile
#	python_pybuf

C_TEST_CASES += \
	file_test \
	li_cstring \
	li_cwstring \
	python_nondynamic \
	python_varargs_typemap

#
# This test only works with modern C compilers
#
#C_TEST_CASES += \
#	complextest

include $(srcdir)/../common.mk

BUILTIN_BROKEN = \
    default_constructor.cpptest \
    director_exception.cpptest \
    exception_order.cpptest \
    li_std_string_extra.cpptest \
    li_std_wstring.cpptest \
    python_abstractbase.cpptest \
    threads_exception.cpptest

BUILTIN_NOT_BROKEN = $(filter-out $(BUILTIN_BROKEN),$(NOT_BROKEN_TEST_CASES))

builtin-check : $(BUILTIN_NOT_BROKEN)

# Overridden variables here
LIBS       = -L.
VALGRIND_OPT += --suppressions=pythonswig.supp

# Custom tests - tests with additional commandline options
# none!

# Rules for the different types of tests
%.cpptest: 
	+$(convert_testcase)
	$(setup)
	+$(swig_and_compile_cpp)
	$(run_testcase)

%.ctest:
	+$(convert_testcase)
	$(setup)
	+$(swig_and_compile_c)
	$(run_testcase)

%.multicpptest: 
	+$(convert_testcase)
	$(setup)
	+$(swig_and_compile_multi_cpp)
	$(run_testcase)


# Call 2to3 to generate Python 3.x test from the Python 2.x's *_runme.py file
%$(PY3SCRIPTSUFFIX): %$(PY2SCRIPTSUFFIX)
	cp $< $@
	$(PY2TO3) -w $@ >/dev/null 2>&1 


# Runs the testcase. A testcase is only run if
# a file is found which has _runme.py (or _runme3.py for Python 3) appended after the testcase name.

run_python = env LD_LIBRARY_PATH=.:$$LD_LIBRARY_PATH PYTHONPATH=.:$(srcdir):$$PYTHONPATH $(RUNTOOL) $(PYTHON) $(srcdir)/$(SCRIPTPREFIX)$*$(SCRIPTSUFFIX)

py2_runme = $(srcdir)/$(SCRIPTPREFIX)$*$(PY2SCRIPTSUFFIX)
py3_runme = $(srcdir)/$(SCRIPTPREFIX)$*$(PY3SCRIPTSUFFIX)

run_testcase = \
	if [ -f $(srcdir)/$(SCRIPTPREFIX)$*$(SCRIPTSUFFIX) ]; then \
	  $(run_python);\
	fi

ifeq (,$(PY3))
convert_testcase =
else
convert_testcase = \
	if [ -f $(py2_runme) ]; then \
	  $(MAKE) -f $(srcdir)/Makefile $(py3_runme); \
	fi
endif

# Clean: remove the generated .py file
%.clean:
	@rm -f $*.py;
	@#We only remove the _runme3.py if it is generated by 2to3 from a _runme.py.
	@if [ -f $(py2_runme) ]; then rm -f $(py3_runme) $(py3_runme).bak; fi

clean:
	$(MAKE) -f $(top_builddir)/$(EXAMPLES)/Makefile python_clean
	rm -f hugemod.h hugemod_a.i hugemod_b.i hugemod_a.py hugemod_b.py hugemod_runme.py
	rm -f clientdata_prop_a.py clientdata_prop_b.py import_stl_a.py import_stl_b.py
	rm -f imports_a.py imports_b.py mod_a.py mod_b.py multi_import_a.py
	rm -f multi_import_b.py packageoption_a.py packageoption_b.py packageoption_c.py

cvsignore:
	@echo '*wrap* *.pyc *.so *.dll *.exp *.lib'
	@echo Makefile
	@for i in ${CPP_TEST_CASES} ${C_TEST_CASES}; do echo $$i.py; done 
	@for i in ${CPP_TEST_CASES} ${C_TEST_CASES}; do if grep -q $${i}_runme.py CVS/Entries ; then echo $${i}_runme.py; fi; done 
	@echo clientdata_prop_a.py 
	@echo clientdata_prop_b.py 
	@echo imports_a.py 
	@echo imports_b.py 
	@echo mod_a.py mod_b.py
	@echo hugemod.h hugemod_a.i hugemod_b.i hugemod_a.py hugemod_b.py hugemod_runme.py
	@echo template_typedef_import.py

hugemod_runme = hugemod$(SCRIPTPREFIX)

hugemod:
	perl hugemod.pl $(hugemod_runme) 
	$(MAKE) hugemod_a.cpptest
	$(MAKE) hugemod_b.cpptest
	sh -c "time $(PYTHON) $(hugemod_runme)"
	sh -c "time $(PYTHON) $(hugemod_runme)"

